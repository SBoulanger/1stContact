//
//  SignInViewControllerExtensions.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.12
//
//

import Foundation
import AWSCognitoIdentityProvider
import AWSMobileHubHelper
import AWSCognitoUserPoolsSignIn


// Extension containing methods which call different operations on Cognito User Pools (Sign In, Sign Up, Forgot Password)
extension SignInViewController {
    
    func handleCustomSignIn() {
        // set the interactive auth delegate to self, since this view controller handles the login process for user pools
        AWSCognitoUserPoolsSignInProvider.sharedInstance().setInteractiveAuthDelegate(self)
        self.handleLoginWithSignInProvider(AWSCognitoUserPoolsSignInProvider.sharedInstance())
    }
    
    func handleUserPoolSignUp () {
        let storyboard = UIStoryboard(name: "UserPools", bundle: nil)
        let viewController = storyboard.instantiateViewController(withIdentifier: "SignUpV")
        self.navigationController?.pushViewController(viewController, animated: true)
        //self.present(viewController, animated: true, completion: nil)
        print("HanldeUserPoolSignUp done")
    }
    
    func handleUserPoolForgotPassword () {
        let storyboard = UIStoryboard(name: "UserPools", bundle: nil)
        let viewController = storyboard.instantiateViewController(withIdentifier: "ForgotPasswordV")
        self.navigationController?.pushViewController(viewController, animated:true)
        print("HandleUserPoolForgotPassword done")
    }
}

// Extension to adopt the `AWSCognitoIdentityInteractiveAuthenticationDelegate` protocol
extension SignInViewController: AWSCognitoIdentityInteractiveAuthenticationDelegate {
    
    // this function handles the UI setup for initial login screen, in our case, since we are already on the login screen, we just return the View Controller instance
    func startPasswordAuthentication() -> AWSCognitoIdentityPasswordAuthentication {
        return self
    }
    
    // prepare and setup the ViewController that manages the Multi-Factor Authentication
    func startMultiFactorAuthentication() -> AWSCognitoIdentityMultiFactorAuthentication {
        let storyboard = UIStoryboard(name: "UserPools", bundle: nil)
        let viewController = storyboard.instantiateViewController(withIdentifier: "MFA")
        DispatchQueue.main.async(execute: {
                self.navigationController?.pushViewController(viewController, animated:true);
        })
        return viewController as! AWSCognitoIdentityMultiFactorAuthentication
    }
}

// Extension to adopt the `AWSCognitoIdentityPasswordAuthentication` protocol
extension SignInViewController: AWSCognitoIdentityPasswordAuthentication {
    
    func getDetails(_ authenticationInput: AWSCognitoIdentityPasswordAuthenticationInput, passwordAuthenticationCompletionSource: AWSTaskCompletionSource<AWSCognitoIdentityPasswordAuthenticationDetails>) {
        self.passwordAuthenticationCompletion = passwordAuthenticationCompletionSource as? AWSTaskCompletionSource<AnyObject>
    }
    
    func didCompleteStepWithError(_ error: Error?) {
        if let error = error as? NSError {
            DispatchQueue.main.async(execute: {
                
                let inputtext : String!
                if (self.toggleButton.titleLabel?.text != "Username"){
                    inputtext = self.customUserIdField.text
                } else {
                    var string : String!
                    string = self.phoneNumberField.text
                    inputtext = self.countryCodeField.text! + String(string.characters.filter { "01234567890".characters.contains($0) })
                }
                
                if error.code == 26 {
                    let actionHandler = {(action:UIAlertAction!) -> Void in
                        let pool = AWSCognitoIdentityUserPool.init(forKey: AWSCognitoUserPoolsSignInProviderKey)
                        let user = pool.getUser(inputtext)
                        user.resendConfirmationCode().continueWith(block: {[weak self] (task: AWSTask<AWSCognitoIdentityUserResendConfirmationCodeResponse>) -> AnyObject? in
                            guard let _ = self else { return nil }
                            DispatchQueue.main.async(execute: {
                                if let error = task.error as? NSError {
                                    UIAlertView(title: error.userInfo["__type"] as? String,
                                                message: error.userInfo["message"] as? String,
                                                delegate: nil,
                                                cancelButtonTitle: "Ok").show()
                                } else if let result = task.result as AWSCognitoIdentityUserResendConfirmationCodeResponse! {
                                    UIAlertView(title: "Code Resent",
                                                message: "Code resent to \(String(describing: result.codeDeliveryDetails?.destination!))",
                                        delegate: nil,
                                        cancelButtonTitle: "Ok").show()
                                    if (user.confirmedStatus != AWSCognitoIdentityUserStatus.confirmed) {
                                        let sb = UIStoryboard.init(name: "UserPools", bundle: nil)
                                        let vc = sb.instantiateViewController(withIdentifier: "SignUpConfirmation") as! UserPoolSignUpConfirmationViewController
                                        vc.sentTo = result.codeDeliveryDetails?.destination
                                        vc.user = user
                                        self?.navigationController?.pushViewController(vc, animated: true)
                                    }
                                }
                            })
                            return nil
                        })
                    }
                    let dismissHandler = {(action:UIAlertAction!) -> Void in
                        print("Dismiss")
                    }
                    AppDelegate.getAppDelegate().showMessage(controller:self,message:"Not confirmed yet: Send new code?", title: "üì≤‚ùì",actionHandler: actionHandler, dismissHandler: dismissHandler)
                } else {
                
                    UIAlertView(title: error.userInfo["__type"] as? String,
                                message: error.userInfo["message"] as? String,
                                delegate: nil,
                                cancelButtonTitle: "Ok").show()
                }
            })
        }
    }
}

// Extension to adopt the `AWSCognitoUserPoolsSignInHandler` protocol
extension SignInViewController: AWSCognitoUserPoolsSignInHandler {
    func handleUserPoolSignInFlowStart() {
        let inputtext : String!
        if (toggleButton.titleLabel?.text != "Username"){
            inputtext = self.customUserIdField.text
        } else {
            var string : String!
            string = self.phoneNumberField.text
            inputtext = self.countryCodeField.text! + String(string.characters.filter { "01234567890".characters.contains($0) })
        }
        // check if both username and password fields are provided
        guard let username = inputtext, !inputtext.isEmpty,
            let password = self.customPasswordField.text, !password.isEmpty else {
                DispatchQueue.main.async(execute: {
                    UIAlertView(title: "Missing UserName / Password",
                        message: "Please enter a valid user name / password.",
                        delegate: nil,
                        cancelButtonTitle: "Ok").show()
                })
                return
        }
        // set the task completion result as an object of AWSCognitoIdentityPasswordAuthenticationDetails with username and password that the app user provides
        self.passwordAuthenticationCompletion?.set(result: AWSCognitoIdentityPasswordAuthenticationDetails(username: username, password: password))
    }
}
